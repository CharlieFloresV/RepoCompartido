// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name b_module
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import b_module
public struct ModBConfiguration {
  public let style: any b_module.ModBStyle
  public let services: any b_module.ModBServices
  public init(style: any b_module.ModBStyle, services: any b_module.ModBServices)
  public init(style: any b_module.ModBStyle = ModBStyleDefault(), idFront: Swift.Int, idLocalCompany: Swift.String)
}
public protocol ModBNavigation : UIKit.UINavigationController {
  var navDelegate: (any b_module.ModBNavigationDelegate)? { get set }
  static func initialize(rootVC: UIKit.UIViewController) -> any b_module.ModBNavigation
}
public protocol ModBStyle {
  var titleFont: b_module.ModBFont { get set }
  var primaryColor: UIKit.UIColor { get set }
  var navigation: (any b_module.ModBNavigation.Type)? { get set }
  var titleText: Swift.String { get set }
  var icon: UIKit.UIImageView? { get set }
}
public struct ModBFont {
  public var font: UIKit.UIFont?
  public var color: UIKit.UIColor
  public init(font: UIKit.UIFont?, color: UIKit.UIColor)
}
public protocol ModBNavigationDelegate : AnyObject {
  func close()
}
public struct ModBStyleDefault : b_module.ModBStyle {
  public var titleFont: b_module.ModBFont
  public var primaryColor: UIKit.UIColor
  public var navigation: (any b_module.ModBNavigation.Type)?
  public var titleText: Swift.String
  public var icon: UIKit.UIImageView?
  public init()
}
public struct ModBServicesDefault : b_module.ModBServices {
  public var timeOut: Swift.Double?
  public var cityOrTown: Swift.String?
  public var country: Swift.String?
  public var idFront: Swift.Int?
  public var idLocalCompany: Swift.String?
  public var state: Swift.String?
  public init(idFront: Swift.Int, idLocalCompany: Swift.String)
}
public protocol ModBDelegate : AnyObject {
}
public protocol ModBServices {
  var timeOut: Swift.Double? { get set }
  var cityOrTown: Swift.String? { get set }
  var country: Swift.String? { get set }
  var idFront: Swift.Int? { get set }
  var idLocalCompany: Swift.String? { get set }
  var state: Swift.String? { get set }
}
public typealias ModBErrorCode_ = b_module.ModBError
public enum ModBError : Swift.Error {
  case configure(reason: Swift.String)
  case notConfigure
  case networkError(reason: Swift.String)
}
extension b_module.ModBError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
final public class ModBFacade {
  final public var isInitialized: Swift.Bool {
    get
  }
  weak final public var delegate: (any b_module.ModBDelegate)? {
    get
    set
  }
  final public func configure(_ configuration: b_module.ModBConfiguration) throws
  final public func start() throws -> UIKit.UIViewController
  public init()
  @objc deinit
}
